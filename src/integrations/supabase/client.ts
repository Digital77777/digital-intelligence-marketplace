
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://vnoxdbvpheowgugeyyfk.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZub3hkYnZwaGVvd2d1Z2V5eWZrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU3NzUxMTksImV4cCI6MjA2MTM1MTExOX0.uPjUDPr3PaTyWgjBSUrhXIrOHbw1DFVWyaU6q02YowM";

// Define types for new learning tables
type LearningCourse = {
  id: string; // uuid
  title: string;
  description: string | null;
  content: string | null;
  category: string;
  difficulty: string;
  duration: number;
  image_url: string | null;
  required_tier: string;
  instructor: string | null;
  prerequisites: string[] | null;
  tags: string[] | null;
  is_featured: boolean;
  certification_available: boolean;
  created_at: string;
  updated_at: string;
};

type LearningPath = {
  id: string; // uuid
  title: string;
  description: string;
  courses: string[]; // array of course uuids
  category: string;
  difficulty: string;
  required_tier: string;
  total_duration: number;
  image_url: string | null;
  badge_name: string | null;
  created_at: string;
};

type Certification = {
  id: string; // uuid
  title: string;
  description: string;
  requirements: string[];
  badge_image: string;
  required_tier: string;
  is_industry_recognized: boolean;
  expiration_period: number | null;
  created_at: string;
};

type LiveEvent = {
  id: string; // uuid
  title: string;
  description: string;
  event_type: string;
  datetime: string;
  duration: number;
  host_name: string;
  required_tier: string;
  max_participants: number | null;
  registration_deadline: string | null;
  image_url: string | null;
};

type LearningProgress = {
  id: string; // uuid
  user_id: string; // uuid
  course_id: string; // uuid
  completion_percent: number;
  last_accessed: string | null;
  completed: boolean;
  created_at: string;
  updated_at: string;
};

type LearningFeedback = {
  id: string; // uuid
  course_id: string; // uuid
  user_id: string; // uuid
  rating: number | null;
  comment: string | null;
  created_at: string;
};

// Define the extended types for the new tables
type ForumCategory = {
  id: string;
  name: string;
  slug: string;
  description: string | null;
  required_tier: string;
  created_at: string;
};

type ForumTopic = {
  id: string;
  title: string;
  content: string;
  user_id: string;
  category_id: string;
  created_at: string;
  updated_at: string;
  views: number;
  is_pinned: boolean;
  is_locked: boolean;
  is_public: boolean;
};

type ForumReply = {
  id: string;
  topic_id: string;
  user_id: string;
  content: string;
  created_at: string;
  updated_at: string;
  is_solution: boolean;
};

type ForumGroup = {
  id: string;
  name: string;
  description: string;
  category: string;
  tier_required: string;
  is_private: boolean;
  created_at: string;
  member_count: number;
  created_by: string;
};

type CourseFeedback = {
  id: string;
  course_id: number;
  user_id: string;
  comment: string | null;
  rating: number | null;
  created_at: string;
};

// Add marketplace types
type MarketplaceTool = {
  id: string;
  created_at: string;
  updated_at: string;
  seller_id: string;
  name: string;
  description: string;
  category: string;
  pricing_model: string;
  price: number;
  external_link: string;
  images: string[];
  contact_info: string;
  tags: string[];
  is_featured: boolean;
  is_subscription: boolean;
  subscription_period: string | null;
  rating: number;
  downloads_count: number;
  demo_url: string | null;
  status: string;
};

type MarketplaceProject = {
  id: string;
  created_at: string;
  updated_at: string;
  client_id: string;
  title: string;
  description: string;
  category: string;
  budget_min: number | null;
  budget_max: number | null;
  budget_type: string | null;
  timeline: string | null;
  skills_required: string[];
  experience_level: string | null;
  status: string;
  deadline: string | null;
  location: string | null;
  is_remote: boolean;
  proposal_count: number;
};

type MarketplaceService = {
  id: string;
  created_at: string;
  updated_at: string;
  provider_id: string;
  title: string;
  description: string;
  category: string;
  price: number;
  pricing_type: string;
  delivery_time: number | null;
  features: string[];
  images: string[];
  tags: string[];
  rating: number;
  reviews_count: number;
  orders_count: number;
  is_featured: boolean;
  status: string;
};

type MarketplaceToolSubmission = {
  id: string;
  created_at: string;
  updated_at: string;
  submitter_id: string;
  tool_name: string;
  short_description: string;
  detailed_description: string;
  external_link: string;
  images: string[];
  category: string;
  pricing_model: string;
  contact_info: string;
  status: string;
  admin_notes: string | null;
  reviewed_at: string | null;
  reviewed_by: string | null;
};

// Add the missing Course and UserProgress types
type Course = {
  id: number;
  title: string;
  description: string | null;
  content: string | null;
  required_tier: string;
  created_at: string;
  updated_at: string;
};

type UserProgress = {
  id: string;
  user_id: string;
  course_id: number;
  completion_percent: number;
  last_accessed: string | null;
};

// Extend the original Database type to include our new tables
export type ExtendedDatabase = Database & {
  public: {
    Tables: {
      marketplace_tools: {
        Row: MarketplaceTool;
        Insert: Omit<MarketplaceTool, 'id' | 'created_at' | 'updated_at' | 'rating' | 'downloads_count' | 'status'>;
        Update: Partial<MarketplaceTool>;
      };
      marketplace_projects: {
        Row: MarketplaceProject;
        Insert: Omit<MarketplaceProject, 'id' | 'created_at' | 'updated_at' | 'proposal_count' | 'status'>;
        Update: Partial<MarketplaceProject>;
      };
      marketplace_services: {
        Row: MarketplaceService;
        Insert: Omit<MarketplaceService, 'id' | 'created_at' | 'updated_at' | 'rating' | 'reviews_count' | 'orders_count' | 'status'>;
        Update: Partial<MarketplaceService>;
      };
      marketplace_tool_submissions: {
        Row: MarketplaceToolSubmission;
        Insert: Omit<MarketplaceToolSubmission, 'id' | 'created_at' | 'updated_at' | 'status' | 'admin_notes' | 'reviewed_at' | 'reviewed_by'>;
        Update: Partial<MarketplaceToolSubmission>;
      };
      learning_courses: {
        Row: LearningCourse;
        Insert: Omit<LearningCourse, 'id' | 'created_at' | 'updated_at'>;
        Update: Partial<LearningCourse>;
      };
      learning_paths: {
        Row: LearningPath;
        Insert: Omit<LearningPath, 'id' | 'created_at'>;
        Update: Partial<LearningPath>;
      };
      certifications: {
        Row: Certification;
        Insert: Omit<Certification, 'id' | 'created_at'>;
        Update: Partial<Certification>;
      };
      live_events: {
        Row: LiveEvent;
        Insert: Omit<LiveEvent, 'id'>;
        Update: Partial<LiveEvent>;
      };
      learning_progress: {
        Row: LearningProgress;
        Insert: Omit<LearningProgress, 'id' | 'created_at' | 'updated_at'>;
        Update: Partial<LearningProgress>;
      };
      learning_feedback: {
        Row: LearningFeedback;
        Insert: Omit<LearningFeedback, 'id' | 'created_at'>;
        Update: Partial<LearningFeedback>;
      };
      forum_categories: {
        Row: ForumCategory;
        Insert: Omit<ForumCategory, 'id' | 'created_at'> & { id?: string; created_at?: string };
        Update: Partial<Omit<ForumCategory, 'id' | 'created_at'>>;
      };
      forum_topics: {
        Row: ForumTopic;
        Insert: Omit<ForumTopic, 'id' | 'created_at' | 'updated_at' | 'views'> & 
                { id?: string; created_at?: string; updated_at?: string; views?: number };
        Update: Partial<Omit<ForumTopic, 'id' | 'created_at'>>;
      };
      forum_replies: {
        Row: ForumReply;
        Insert: Omit<ForumReply, 'id' | 'created_at' | 'updated_at'> & 
                { id?: string; created_at?: string; updated_at?: string };
        Update: Partial<Omit<ForumReply, 'id' | 'created_at'>>;
      };
      forum_groups: {
        Row: ForumGroup;
        Insert: Omit<ForumGroup, 'id' | 'created_at' | 'member_count'> & 
                { id?: string; created_at?: string; member_count?: number };
        Update: Partial<Omit<ForumGroup, 'id' | 'created_at'>>;
      };
      course_feedback: {
        Row: CourseFeedback;
        Insert: Omit<CourseFeedback, 'id' | 'created_at'> & { id?: string; created_at?: string };
        Update: Partial<Omit<CourseFeedback, 'id' | 'created_at'>>;
      };
      courses: {
        Row: Course;
        Insert: Omit<Course, 'id' | 'created_at' | 'updated_at'> & 
                { id?: number; created_at?: string; updated_at?: string };
        Update: Partial<Omit<Course, 'id' | 'created_at' | 'updated_at'>>;
      };
      user_progress: {
        Row: UserProgress;
        Insert: Omit<UserProgress, 'id'> & { id?: string };
        Update: Partial<Omit<UserProgress, 'id'>>;
      };
    } & Database['public']['Tables'];
  };
};

// Create and export the extended Supabase client
export const supabase = createClient<ExtendedDatabase>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);
